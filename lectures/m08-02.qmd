---
title: "Interpretability through plotting"
subtitle: Behavioral Data Science in R II
format: 
  revealjs:
    css: style.css
bibliography: ../references.bib
fig-dpi: 300
---

## Interpretability tools

We need ways to look inside the black box

- Feature importance
- **Diagnostic plots**
  - Partial Dependency Plots
  - Individual Conditional Expectation Plots


```{r}
#| message: false
#| include: false
library(tidyverse)
library(tidymodels)
library(hutils)
library(DALEX)
library(DALEXtra)
taxi <- read_csv("data/nyc-taxi.csv") %>% 
  mutate(pickup_datetime = lubridate::as_datetime(pickup_datetime))
```

```{r}
#| include: false
splits <- initial_split(taxi, prop = .8)
train <- training(splits)
test <- testing(splits)

folds <- vfold_cv(train, 10)
```

```{r}
#| include: false
train %>% 
  ggplot(aes(x=pickup_longitude, y = pickup_latitude)) +
  geom_point(alpha = .2, size = .2, shape = 16, color = "goldenrod1") +
  theme_void() +
  theme(panel.background = element_rect(fill = "black"))
```


```{r}
#| include: false
fe_rec <- recipe(trip_duration ~ ., train) %>%
  step_mutate(
    dist = haversine_distance(pickup_latitude, pickup_longitude, dropoff_latitude, dropoff_longitude),
    bearing = bearing(pickup_latitude, pickup_longitude, dropoff_latitude, dropoff_longitude)
    ) %>%
  step_date(pickup_datetime, features = c("dow", "doy")) %>%
  step_time(pickup_datetime, features = c("decimal_day")) %>% 
  update_role(pickup_datetime, new_role = "id")

train_juiced <- juice(prep(fe_rec))
```

```{r}
#| include: false
#| cache: true
rf_mod <- rand_forest(mode = "regression")

wf <- workflow() %>% 
  add_recipe(fe_rec) %>% 
  add_model(rf_mod)

fitted_model <- wf %>% 
  fit(train)

```


```{r}
#| include: false
make_explainer_obj <- function(fitted_workflow){
  fitted_model <-
    fitted_workflow %>% 
    extract_fit_parsnip() # <- parsnip model_fit object

  feature_data <- 
    fitted_workflow %>% 
    extract_mold() %>% 
    pluck("predictors") 
  
  outcome_data <- 
    fitted_workflow %>% 
    extract_mold() %>% 
    pluck("outcomes") %>% 
    pluck(1)    # <- is is a 1D df, make it a vector
  
  vip_features <- 
    explain_tidymodels(
      fitted_model, 
      data = feature_data, 
      y = outcome_data
    )
  
  return(vip_features)
}

```

## Setting up an explainer

```{r}
#| echo: true
#| message: false
#| output: false
library(DALEX)
library(DALEXtra)

explainer_rf <- make_explainer_obj(fitted_model)
```


## Partial Dependence Plots

PDPs visualize the **marginal** influence of a predictor, averaging over the other predictors.

::: {.callout-tip icon="false"}
## Algorithm
For a selected predictor (x):

1. Construct a grid of j evenly spaced values across the distribution
   of $x$: ${x1, x2, ..., xj}$
2. For $j$ in ${1,...,j}$ do
     - Copy the training data $j$ times and replace the all original values of $x$ with the constant $x_j$
     - Apply given ML model (i.e., obtain vector of predictions)
     - Average predictions together
3. Plot the averaged predictions against $x_1$, $x_2$, ..., $x_j$
:::

## Visualizing time-of-day effects

```{r}
#| echo: false

ggplot_pdp <- function(obj, x) {

  p <- 
    as_tibble(obj$agr_profiles) %>%
    mutate(`_label_` = stringr::str_remove(`_label_`, "^[^_]*_")) %>% 
    ggplot(aes(`_x_`, `_yhat_`)) +
    geom_line(color = "midnightblue", linewidth = 1.2, alpha = 0.8)
  
  p
}


```


```{r}
#| echo: true
pdp_time <- model_profile(explainer_rf, N = 100, variables = "pickup_datetime_decimal_day")
ggplot_pdp(pdp_time, pickup_datetime_decimal_day)

```

## Individual Conditionalized Expectation

- ICE plots visualize the effect of a predictor for a sample of individual cases.
- Help to visualize heterogeneity in predictor effects (i.e., does predictor effect vary depending on levels of other variables)

## ICE plots

```{r}

ggplot_ice <- function(obj, x) {
  agg_d <- as_tibble(obj$agr_profiles) %>%
      mutate(`_label_` = stringr::str_remove(`_label_`, "^[^_]*_")) 
  
  first_y <- agg_d %>% summarize(first_y = first(`_yhat_`)) %>% pull(first_y)
  
  p <- 
    agg_d %>% 
    mutate(`_yhat_` = `_yhat_` - first_y) %>% 
    ggplot(aes(`_x_`, `_yhat_`)) +
    geom_line(data = as_tibble(obj$cp_profiles) %>% 
                group_by(`_ids_`) %>% 
                mutate(firsts = first(`_yhat_`)) %>% 
                mutate(`_yhat_` = `_yhat_` - firsts),
              aes(x = {{ x }}, group = `_ids_`),
              linewidth = 0.5, alpha = 0.1, color = "gray50")
  
  num_colors <- n_distinct(obj$agr_profiles$`_label_`)
  
  if (num_colors > 1) {
    p <- p + geom_line(aes(color = `_label_`), linewidth = 1.2, alpha = 0.8)
  } else {
    p <- p + geom_line(color = "midnightblue", linewidth = 1.2, alpha = 0.8)
  }
  
  p
}

```

```{r}
#| echo: true
ggplot_ice(pdp_time, pickup_datetime_decimal_day)
```


## Visualizing distance and `trip_duration`

```{r}
#| echo: true
pdp_dist <- model_profile(explainer_rf, N = 100, variables = "dist")
ggplot_ice(pdp_dist, dist)
```

## 2-way Partial Dependence Plots

Partial dependence plots can also be made in two dimensions, to plot the relationship between two variables and the outcome.

![](../imgs/2-way-pdp.png)

## A 2-way PDP of our NYC taxi model

- Examining trip_duration as a function of `pickup_latitude` and `pickup_longitude`

```{r}
#| echo: false
pdp_2way <- function(fitted_workflow, x1, x2, grid_steps = 64, N = 100, custom_range = NULL){
  var1 <- enquo(x1)
  x1_var_name <- quo_name(var1)
  
  var2 <- enquo(x2)
  x2_var_name <- quo_name(var2)
  
  d <- fitted_model %>% 
      extract_mold() %>% 
      pluck("predictors")
  
  if (is.null(custom_range)){
    grid <- crossing(
    !! x1_var_name := seq(min(pull(d, !!var1)), max(pull(d, !!var1)), length.out = grid_steps),
    !! x2_var_name := seq(min(pull(d, !!var2)), max(pull(d, !!var2)), length.out = grid_steps)
    )
  } else {
    grid <- crossing(
      !! x1_var_name := seq(custom_range[1,1], custom_range[2,1],  length.out = grid_steps),
      !! x2_var_name := seq(custom_range[1,2], custom_range[2,2], length.out = grid_steps)
    )
  }
  

  pred_df <-  d %>%
    sample_n(N) %>%
    mutate(.id = 1:n()) %>%
    select(-c(!!var1, !!var2)) %>%
    cross_join(grid)

  p <- extract_fit_parsnip(fitted_model) %>%
    augment(pred_df) %>%
    group_by(!!var1, !!var2) %>%
    summarize(m = mean(.pred)) %>%
    ggplot(aes(x = !!var1, y = !!var2, fill = m)) +
    geom_raster(interpolate = TRUE) +
    # geom_tile(linewidth=0.0) +
    scale_fill_viridis_c() +
    theme_minimal() +
    theme(panel.grid = element_blank())
  
  return(p)
  
}


```

```{r}
#| echo: true
p <- pdp_2way(fitted_model, pickup_longitude, pickup_latitude, grid_steps = 128, N = 250)
p
```

## Overlaying data

```{r}
#| echo: true
p +
  geom_point(
    data = train, mapping = aes(x = pickup_longitude, y = pickup_latitude), inherit.aes = FALSE, color = "red", size = .1, alpha = .1
  )
```

## Insights in two dimensions

Trips are slower in lower Manhattan than upper Manhattan or Harlem

```{r}
#| echo: false
#| fig.dpi: 300
p <- pdp_2way(fitted_model, pickup_longitude, pickup_latitude, grid_steps = 128, N = 250, custom_range = matrix(c(c(-74.02, -73.925), c(40.66, 40.85)), ncol = 2))

p +
  geom_point(
    data = train, mapping = aes(x = pickup_longitude, y = pickup_latitude), inherit.aes = FALSE, color = "red", size = .05, alpha = .1
  ) +
  xlim(-74.02, -73.925) +
  ylim(40.66, 40.85) +
  theme(aspect.ratio = 1)
```


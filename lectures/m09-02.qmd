---
title: |
  | More on
  | `hierarchical` & `k-means` clustering
  | (with penguins!)
subtitle: | 
  | Behavioral Data Science in R II
  | Unit 4
  | Module 9
format: 
  revealjs:
    css: style.css
---

## Penguins rule

![](../imgs/penguins.webp)

## The `penguins` dataset

```{r}
library(tidymodels)
library(tidyverse)
library(tidyclust)
library(plotly)
```

```{css, echo=FALSE}
.title {
  font-size: 70px !important;
}

.subtitle {
  font-size: 50px !important;
  color: blue
}
```

:::{style="font-size:35%;"}
```{r}
#| class-output: scrolling
data("penguins", package = "modeldata")
penguins <- penguins %>%
  #select(bill_length_mm, bill_depth_mm) %>%
  drop_na() 

penguins <- data.frame(penguins)

#head(penguins)

library(DT)
datatable(penguins, 
          options = list(
            pageLength = 20, # Number of rows to display
            scrollX = TRUE, # Enable horizontal scrollbar
            scrollY = '130px' # Set vertical scroll and its height
          ),
          width = '100%', # Table width
          height = '100px' # Table height
)
```
:::

:::{.columns}
::::{.column width="60%"}
```{r, fig.width=6, fig.height=4}
#par(mfrow=c(3,3))
library(gridExtra)
p1<-ggplot(penguins) +
  geom_bar(aes(x = species), stat="count") 
p2<-ggplot(penguins) +
  geom_bar(aes(x = island), stat="count") 
p3<-ggplot(penguins) +
  geom_bar(aes(x = sex), stat="count") 
p4<-ggplot(penguins) +
  geom_histogram(aes(x = bill_length_mm), bins = 30)
p5<-ggplot(penguins) +
  geom_histogram(aes(x = bill_depth_mm), bins = 30)
p6<-ggplot(penguins) +
  geom_histogram(aes(x = flipper_length_mm), bins = 30)
p7<-ggplot(penguins) +
  geom_histogram(aes(x = body_mass_g), bins = 30)

grid.arrange(p1,p2,p3,p4,p5,p6,p7, ncol=3)
```
::::

::::{.column width="40%" .fragment}
```{r, out.width="100%", out.height="100%"}
library(plotly)

fig <- plot_ly() %>%
  add_trace(
    data = subset(penguins, sex == "male"),
    x = ~bill_length_mm, y = ~bill_depth_mm, z = ~body_mass_g,
    color = ~species, opacity = .75,
    type = 'scatter3d', mode = 'markers',
    marker = list(size = 5, symbol = 'circle'),
    showlegend=T
  ) %>%
  add_trace(
    data = subset(penguins, sex == "female"),
    x = ~bill_length_mm, y = ~bill_depth_mm, z = ~body_mass_g,
    color = ~species, opacity = .5,
    type = 'scatter3d', mode = 'markers',
    marker = list(size = 5, symbol = 'square'),
    showlegend=F
  ) %>%
  layout(
    scene = list(
      xaxis = list(title = 'Bill Length (mm)'),
      yaxis = list(title = 'Bill Depth (mm)'),
      zaxis = list(title = 'Body Mass (g)'),
      camera = list(eye = list(x = 2.5, y = 1.75, z = 1.2))
    ),
    autosize = F, width = 400, height = 400,
    margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0),
    legend = list(title = list(text = 'Species'), 
                  x = 0.0, y = 1)
  ) 


fig
```

```{r}
library(plotly)

# Original plot
fig <- plot_ly(penguins, x = ~bill_length_mm, y = ~bill_depth_mm, z = ~body_mass_g, 
               color = ~species, opacity = .5) %>%
  add_markers(symbol = ~sex) %>%
  layout(
    scene = list(xaxis = list(title = 'Bill Length (mm)'),
                 yaxis = list(title = 'Bill Depth (mm)'),
                 zaxis = list(title = 'Body Mass (g)')),
    camera = list(eye = list(x = 2.5, y =1.75, z = 1.2)),
    autosize = F, width = 400, height = 400, 
    margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0),
    legend = list(x = 0.1, y = 0.9)
  )

# Adding dummy traces for the sex legend
fig <- fig %>%
  add_trace(
    x = c(NA), y = c(NA), z = c(NA),
    marker = list(symbol = 'circle', color = 'black', size = 10),
    name = 'Male',
    showlegend = TRUE
  ) %>%
  add_trace(
    x = c(NA), y = c(NA), z = c(NA),
    marker = list(symbol = 'square', color = 'black', size = 10),
    name = 'Female',
    showlegend = TRUE
  )

# Customizing the legend
fig <- fig %>%
  layout(
    legend = list(
      orientation = "h",
      y = -0.3,
      xanchor = "center",
      x = 0.5,
      itemsizing = 'constant'
    )
  )

fig

```

::::
:::

## Hierarchical clustering

:::{.columns}
::::{.column width="50%" style="font-size:60%;"}

```{r}
#| echo: true
set.seed(1)

hc_spec <- hier_clust(
  num_clusters = 3,
  linkage_method = "average"
)

rec <- recipe(~ ., data = penguins) %>% 
  update_role(all_factor(), new_role = "id_var") %>% 
  step_normalize(all_predictors())
rec %>% summary()
```
::::

::::{.column width="50%" style="font-size:60%;"}
```{r}
#| echo: true
hc_fit <- workflow() %>% 
  add_recipe(rec) %>% 
  add_model(hc_spec) %>% 
  fit(data = penguins)

hc_fit$fit$fit$fit %>% plot() # Note: have to do 3 layers of $fit$fit$fit because there are 3 steps in our workflow
```
::::
:::

## Tuning _k_

:::{.columns}
::::{.column width="50%" style="font-size:60%;"}
```{r}
#| echo: true
penguins_cv <- vfold_cv(penguins, v = 5)

hc_tune_spec <- hier_clust(
  num_clusters = tune(),
  linkage_method = "average"
)

clust_num_grid <- grid_regular(
  num_clusters(),
  levels = 10
)

hc_tune_wf <- workflow() %>% 
  add_recipe(rec) %>% 
  add_model(hc_tune_spec)

res <- tune_cluster(
  hc_tune_wf,
  resamples = penguins_cv,
  grid = clust_num_grid,
  metrics = cluster_metric_set(sse_ratio, silhouette_avg)
)
```
::::

::::{.column width="50%"}

:::{.r-stack}
::::{.fragment .fade-in-then-out}

Low WSS/TSS ratio indicates well-separated clusters

![](../imgs/wss_tss.jpg)
::::

::::{.fragment .fade-in-then-out}

Elbow method

```{r, fig.width=5, fig.height=5}
res_metrics <- res %>% collect_metrics()

res_metrics %>%
  filter(.metric == "sse_ratio") %>%
  ggplot(aes(x = num_clusters, y = mean)) +
  geom_point() +
  geom_line() +
  theme_minimal() +
  ylab("mean WSS/TSS ratio, over 5 folds") +
  xlab("Number of clusters") +
  scale_x_continuous(breaks = 1:10)
```
::::

::::{.fragment .fade-in-then-out}

Higher silhouette score indicates well-separated clusters

![](../imgs/silhouette_score.jpg)
::::

::::{.fragment}

Silhouette method

```{r, fig.width=5, fig.height=5}
res_metrics %>%
  filter(.metric == "silhouette_avg") %>%
  ggplot(aes(x = num_clusters, y = mean)) +
  geom_point() +
  geom_line() +
  theme_minimal() +
  ylab("mean Silhouette score, over 5 folds") +
  xlab("Number of clusters") +
  scale_x_continuous(breaks = 1:10)
```
::::

:::
::::
:::

## Tuning _linkage method_

:::{.columns}
::::{.column width="50%" style="font-size:60%;"}
```{r}
#| echo: true
#| code-line-numbers: "5,6,7,8,9,10,11,12"
hc_tune_spec <- hier_clust(
  num_clusters = 3,
  linkage_method = tune()
)

linkage_grid <- tibble(
  linkage_method = values_linkage_method)
values_linkage_method
```

```{r}
#| echo: true
hc_tune_wf <- workflow() %>% 
  add_recipe(rec) %>% 
  add_model(hc_tune_spec)

res <- tune_cluster(
  hc_tune_wf,
  resamples = penguins_cv,
  grid = linkage_grid,
  control = control_grid(save_pred = TRUE, extract = identity),
  metrics = cluster_metric_set(sse_within_total, sse_total, sse_ratio)
)
```

::::

::::{.column width="50%"}

```{r, fig.width=5, fig.height=5}
res_metrics <- res %>% collect_metrics()

res_metrics %>%
  filter(.metric == "sse_ratio") %>%
  ggplot(aes(x = factor(linkage_method), y = mean)) +
  geom_col() +
  ylab("mean WSS/TSS ratio, over 5 folds") +
  xlab("Linkage method")
```

::::
:::

## What do our clusters capture?

```{r}
hc_spec <- hier_clust(
  num_clusters = 3,
  linkage_method = "ward.D2"
)

hc_fit <- workflow() %>% 
  add_recipe(rec) %>% 
  add_model(hc_spec) %>% 
  fit(data = penguins)
```

```{r}
library(dendextend)
library(colorspace)
library(plotrix)

dend <- hc_fit$fit$fit$fit %>% as.dendrogram()

species <- penguins$species[labels(dend)]
species_ <- ifelse(species == "Adelie", "red", ifelse(species == "Gentoo", "blue", "green"))
island <- penguins$island[labels(dend)]
island_ <- ifelse(island == "Torgersen", "red", ifelse(island == "Biscoe", "blue", "green"))
sex <- penguins$sex[labels(dend)]
sex_ <- ifelse(sex == "female", "red", "blue")

k_3 <- cutree(dend,k = 3, order_clusters_as_data = FALSE) 
k_3_ <- ifelse(k_3 == 1, "red", ifelse(k_3 == 2, "blue", "green"))

the_bars <- cbind(
  sapply(cut(penguins$bill_length_mm,breaks=c(0,unname(quantile(penguins$bill_length_mm))), labels=heat_hcl(5)), color.id),
  sapply(cut(penguins$bill_depth_mm,breaks=c(0,unname(quantile(penguins$bill_depth_mm))), labels=heat_hcl(5)), color.id),
  sapply(cut(penguins$flipper_length_mm,breaks=c(0,unname(quantile(penguins$flipper_length_mm))), labels=heat_hcl(5)), color.id),
  sapply(cut(penguins$body_mass_g,breaks=c(0,unname(quantile(penguins$body_mass_g))), labels=heat_hcl(5)), color.id),
  species_, island_, sex_, k_3_)

par(mar = c(8,7,2,2))
plot(dend)
colored_bars(colors = the_bars, dend = dend, sort_by_labels_order = FALSE, rowLabels = 
               c("bill_length_mm","bill_depth_mm","flipper_length_mm","body_mass_g","species","island","sex","cluster"))

```

## `k-means` clustering

```{r}
#| echo: true
kmeans_spec <- k_means(
  num_clusters = 3
)

kmeans_fit <- workflow() %>% 
  add_recipe(rec) %>% 
  add_model(kmeans_spec) %>% 
  fit(data = penguins)
```

## Using PCA to visualize clusters

:::{style="font-size:60%;" .r-stretch}
```{r}
#| echo: true
library(factoextra)

res.km <- kmeans(penguins %>% mutate_if(is.numeric, function(x) scale(x, center=F)) %>% select(-c(sex, species, island)), 3, nstart = 25)

fviz_cluster(res.km, data = penguins %>% select(-c(sex, species, island)),
             palette = c("#2E9FDF", "#00AFBB", "#E7B800"), 
             geom = "point",
             ellipse.type = "convex", 
             ggtheme = theme_bw())
```
:::

## Do hierarchical and k-means find the same clusters?

```{r}
#| echo: true
pengclust <- cbind(penguins, 
                  kmeans_fit %>% extract_cluster_assignment() %>% rename(.km_cluster = .cluster), 
                  hc_fit %>% extract_cluster_assignment() %>% rename(.hc_cluster = .cluster))

conf_mat(pengclust, truth=.hc_cluster, estimate=.km_cluster)
```

## Do hierarchical and k-means find the same clusters?

```{r}
set.seed(123)
```

:::{style="font-size:60%;"}
```{r}
#| echo: true
pca_rec <- rec %>%
  step_pca(all_predictors(), keep_original_cols = T)

pca_data <- pca_rec %>% prep(penguins) %>% bake(new_data = NULL)

pca_data <- cbind(pca_data, 
                  kmeans_fit %>% extract_cluster_assignment() %>% rename(.km_cluster = .cluster), 
                  hc_fit %>% extract_cluster_assignment() %>% rename(.hc_cluster = .cluster))
```
:::

:::{.columns}
::::{.column width="50%"}
k-means clusters
```{r}
fig <- plot_ly() %>%
  add_trace(
    data = pca_data,
    x = ~PC1, y = ~PC2, z = ~PC3, color=~.km_cluster,
    opacity = .75,
    type = 'scatter3d', mode = 'markers',
    marker = list(size = 5, symbol = 'circle'),
    showlegend=T
  ) %>% 
  layout(
    scene = list(
      xaxis = list(title = 'PC1'),
      yaxis = list(title = 'PC2'),
      zaxis = list(title = 'PC3'),
      camera = list(eye = list(x = 2.5, y = -.1, z = .8))
    ),
    autosize = F, width = 400, height = 400,
    margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0),
    legend = list(x = 0.0, y = 1)
  ) 

fig
```
::::

::::{.column width="50%"}
hierarchical clusters
```{r}
fig <- plot_ly() %>%
  add_trace(
    data = pca_data,
    x = ~PC1, y = ~PC2, z = ~PC3, color=~.hc_cluster,
    opacity = .75,
    type = 'scatter3d', mode = 'markers',
    marker = list(size = 5, symbol = 'circle'),
    showlegend=T
  ) %>% 
  layout(
    scene = list(
      xaxis = list(title = 'PC1'),
      yaxis = list(title = 'PC2'),
      zaxis = list(title = 'PC3'),
      camera = list(eye = list(x = 2.5, y = -.1, z = .8))
    ),
    autosize = F, width = 400, height = 400,
    margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0),
    legend = list(x = 0.0, y = 1)
  ) 

fig
```
::::
:::

## Clustering on PCA data

:::{style="font-size:60%;"}
```{r}
set.seed(123)
```

```{r}
#| echo: true
kmeans_spec <- k_means(
  num_clusters = 3
)

kmeans_fit_pca <- kmeans_spec %>% 
  fit(~ PC1 + PC2 + PC3 + PC4,
  data = pca_data)

pca_data <- cbind(pca_data, kmeans_fit_pca %>% extract_cluster_assignment())
```
:::

```{r}
fig <- plot_ly() %>%
  add_trace(
    data = pca_data,
    x = ~PC1, y = ~PC2, z = ~PC3, color=~.cluster,
    opacity = .75,
    type = 'scatter3d', mode = 'markers',
    marker = list(size = 5, symbol = 'circle'),
    showlegend=T
  ) %>% 
  layout(
    scene = list(
      xaxis = list(title = 'PC1'),
      yaxis = list(title = 'PC2'),
      zaxis = list(title = 'PC3'),
      camera = list(eye = list(x = 2.5, y = -.1, z = .8))
    ),
    autosize = F, width = 400, height = 400,
    margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0),
    legend = list(x = 0.0, y = 1)
  ) 


fig
```

## What do our clusters capture?

::: {.panel-tabset style="font-size:55%;"}

## species

```{r}
ggplot(pca_data, aes(x = species, fill=.km_cluster)) +
  geom_bar(position="stack",stat="count")
```

## island

```{r}
ggplot(pca_data, aes(x = island, fill=.km_cluster)) +
  geom_bar(position="stack",stat="count")
```

## sex

```{r}
ggplot(pca_data, aes(x = sex, fill=.km_cluster)) +
  geom_bar(position="stack",stat="count")
```

## bill_length_mm

```{r}
ggplot(pca_data, aes(x = bill_length_mm, fill=.km_cluster)) +
  geom_histogram(position="identity",alpha=.7)
```

## bill_depth_mm

```{r}
ggplot(pca_data, aes(x = bill_depth_mm, fill=.km_cluster)) +
  geom_histogram(position="identity",alpha=.7)
```

## flipper_length_mm

```{r}
ggplot(pca_data, aes(x = flipper_length_mm, fill=.km_cluster)) +
  geom_histogram(position="identity",alpha=.7)
```

## body_mass_g

```{r}
ggplot(pca_data, aes(x = body_mass_g, fill=.km_cluster)) +
  geom_histogram(position="identity",alpha=.7)
```
:::

## Using cluster assignments to support supervised learning

```{r}
split <- initial_split(pca_data)
train <- training(split)
test <- testing(split)

multi_log_spec <- multinom_reg(
  mode = "classification",
  engine = "nnet"
)

mn_lr_fit1 <- workflow() %>% 
  add_formula(species ~ bill_length_mm) %>% 
  add_model(multi_log_spec) %>% 
  fit(data = train)

predictions_mn1 <- mn_lr_fit1 %>% 
  augment(new_data = test) 

predictions_mn1 %>% accuracy(truth= species, estimate=.pred_class)
```

```{r}
mn_lr_fit2 <- workflow() %>% 
  add_formula(species ~ bill_length_mm + .km_cluster) %>% 
  add_model(multi_log_spec) %>% 
  fit(data = train)

predictions_mn2 <- mn_lr_fit2 %>% 
  augment(new_data = test) 

predictions_mn2 %>% accuracy(truth= species, estimate=.pred_class, event_level="first")
```





